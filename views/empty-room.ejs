<%- include('partials/header.ejs', {title: `What Can We Play Today?`, stylesheet: `emptyRoom.css`}) %>
<%- include('partials/navbarLogout.ejs') %>

<!-- This file and route are called EMPTY ROOM but it's only technically empty for the first user. After more users join it'll change dynamically with Javascript -->
<div class="gradient-background">
    <div id="roomElements">
        <h1 class="room-title"> ROOM CODE </h1>
        <img class="roomSeperator" src="/img/controllerSeparator.png" alt="Seperator for Page">
        <h1 id = "roomNumber" class="room-number"> <%= roomNumber %> </h1>
    </div>
    <div class="background-box" style="margin-top: 3vh;">
        <h4 style="text-decoration: underline; color: #b1b1b1;"> MEMBERS </h4>

        <!-- body tag comes from header.ejs; call sendMessage on DOM ready -->
            <div id="toGen"></div>
            <br>
            <!-- TODO: Ensure the "Host" of the room (the first user) can only click Generate -->
            <button id="newList" class="roomButtonText"> GENERATE LIST </button>
            <!-- TODO: Use proper CSS styling here instead of BRs -->
            <br>
            <button id="copyRoomLink" class="roomButtonText" onclick="showSuccess(); copyFunction()"> COPY ROOM CODE </button>
            <br>
            <!-- TODO: Make this actually do something -->
            <button id="leave" class="roomButtonText" style="background-color: #C75858"> LEAVE ROOM </button>
    </div>
</div>
<script>
    // If we were just on the list page and somehow navigated here, bounce back
    try {
        if (sessionStorage.getItem('stayOnList') === '1') {
            window.location.replace('/list');
        }
    } catch (_) {}
    // Sets up our Socket connections
    const socket = io('<%= url %>');
    console.log('[EMPTY] Socket connecting...');
    socket.on('connect', () => {
        console.log('[EMPTY] Socket connected', { id: socket.id });
    });

    // Initializes sessions for filtering
    sessionStorage.setItem('tagSelection', '');
    sessionStorage.setItem('categorySelection', '');
    sessionStorage.setItem('priceSelection', '');
    sessionStorage.setItem('minPriceSelection', '');
    sessionStorage.setItem('maxPriceSelection', '');
    // Fetches data from Cookies and send it to the back-end. Runs on page load.
    const sendMessage = () => {
        console.log('[EMPTY] sendMessage');
        let steamID = Cookies.get('steamID');
        let username = Cookies.get('username');
        let avatar = Cookies.get('avatar');
        let roomNumber = Cookies.get('roomNumber');
        const payload = {steamID: steamID, username: username, avatar: avatar, roomNumber: roomNumber};
        console.log('[EMPTY] emit message', payload);
        socket.emit('message', payload);
    }
    window.addEventListener('DOMContentLoaded', () => {
        sendMessage();
    });
     
    // Receives data from Back-end when other users join.
    socket.on('otherMsg', (data) => {
        console.log('[EMPTY] otherMsg received', { members: Array.isArray(data) ? data.length : 0 });
        let userImages = [];
        // Sets up the image div with the first user that joins
        let divAppend = document.getElementById('toGen');
        // go through all user images and only add them to an output array if 
        // they're not already there.
        for (let i = 0; i < data.length; i++) {
            if (!userImages.includes(data[i][2])) {
                let imgEle = document.createElement('img');
                imgEle.src = data[i][2];
                userImages.push(imgEle);
            }
        }
        // clear the div before iterating through the user images and appending
        divAppend.innerHTML = "";
        for (let j = 0; j < userImages.length; j++) {
            divAppend.appendChild(userImages[j]);
        }
    });

    // Button used to dynamically reload page for all members
    let button = document.getElementById('newList');
    button.addEventListener('click', function() {
        console.log('[EMPTY] Generate List clicked');
        let steamID = Cookies.get('steamID');
        let username = Cookies.get('username');
        let avatar = Cookies.get('avatar');
        let roomNumber = Cookies.get('roomNumber');
        const payload = {steamID: steamID, username: username, avatar: avatar, roomNumber: roomNumber};
        console.log('[EMPTY] emit newList', payload);
        socket.emit('newList', payload);
    });

    // Leave functionality to clear all user data
    let leave = document.getElementById('leave');
    leave.addEventListener('click', function() {
        let roomNumber = Cookies.get('roomNumber');
        sessionStorage.clear();
        socket.emit('generateList2', {roomNumber: roomNumber});
        window.location.href = "/leave";
    });

    // Dynamically updates the page when a user leaves
    socket.on('refreshList2', () =>  {
        console.log('[EMPTY] refreshList2 received -> reloading');
        location.reload();
    });
    
    // redirects to list page
    socket.on('navigate', function() {
        console.log('[EMPTY] navigate received -> /list');
        window.location.href = "/list";
    });

    // Used to copy the room number
    function copyFunction() {
        let copyRoomNum = document.getElementById('roomNumber');
        let selection = window.getSelection();
        let range = document.createRange();

        range.selectNodeContents(copyRoomNum);
        selection.removeAllRanges();
        selection.addRange(range);
        
        document.execCommand('copy');
    }

    // Shows that the room code has been copied
    function showSuccess() {
        jSuites.notification({
            name: 'Copied to Clipboard!',
        });
    }

    // Utilizing jSuite notifs to give a simple popup for users in Demo mode
    function demoNotification() {
        jSuites.notification({
            name: 'Welcome to the Demo!',
            message: `After logging in via Steam. Users can either Create Rooms or Join other pre-existing ones, which leads to this shared Room page. Once in this room, any user can generate the list of shared games amongst all users. Click Generate List to proceed!`,
            autoHide: false
        });
    }
    const cookieResult = Cookies.get('isDemo');
    if (cookieResult == `true`) {
        demoNotification();
    }
    
</script>
