<%- include('partials/header.ejs', {title: `What Can We Play Today?`, stylesheet: `emptyRoom.css`}) %>
<%- include('partials/navbarLogout.ejs') %>

<!-- This file and route are called EMPTY ROOM but it's only technically empty for the first user. After more users join it'll change dynamically with Javascript -->
<div class="gradient-background">
    <div id="roomElements">
        <h1 class="room-title"> ROOM CODE </h1>
        <img class="roomSeperator" src="/img/controllerSeparator.png" alt="Seperator for Page">
        <h1 id = "roomNumber" class="room-number"> <%= roomNumber %> </h1>
    </div>
    <div class="background-box" style="margin-top: 3vh;">
        <h4 style="text-decoration: underline; color: #b1b1b1;"> MEMBERS </h4>

        <!-- body tag comes from header.ejs; call sendMessage on DOM ready -->
            <div id="toGen"></div>
            <br>
            <!-- TODO: Ensure the "Host" of the room (the first user) can only click Generate -->
            <button id="newList" class="roomButtonText"> GENERATE LIST </button>
            <!-- TODO: Use proper CSS styling here instead of BRs -->
            <br>
            <button id="copyRoomLink" class="roomButtonText" onclick="showSuccess(); copyFunction()"> COPY ROOM CODE </button>
            <br>
            <!-- TODO: Make this actually do something -->
            <button id="leave" class="roomButtonText" style="background-color: #C75858"> LEAVE ROOM </button>
    </div>
</div>
<script>
    // If we were just on the list page and somehow navigated here, bounce back
    try {
        if (sessionStorage.getItem('stayOnList') === '1') {
            window.location.replace('/list');
        }
    } catch (_) {}
    // Setup Supabase Realtime Channel for this room
    const steamID = Cookies.get('steamID');
    const username = Cookies.get('username');
    const avatar = Cookies.get('avatar');
    const roomNumber = Cookies.get('roomNumber');
    console.log('[EMPTY] Cookies', { steamID, username, hasAvatar: !!avatar, roomNumber });
    const channel = (window.supabaseClient && roomNumber)
      ? window.supabaseClient.channel('room-' + roomNumber, { config: { presence: { key: steamID || Math.random().toString(36).slice(2) } } })
      : null;
    if (channel) {
      console.log('[EMPTY] Subscribing to channel', 'room-' + roomNumber);
      channel.on('presence', { event: 'sync' }, () => {
        // Build member list from presence state and render avatars
        try {
          const state = channel.presenceState();
          const members = [];
          Object.keys(state).forEach((key) => {
            (state[key] || []).forEach((meta) => {
              members.push([meta.steamID || key, meta.username || '', meta.avatar || '']);
            });
          });
          console.log('[EMPTY] presence sync', { count: members.length, state });
          const divAppend = document.getElementById('toGen');
          divAppend.innerHTML = '';
          const seen = new Set();
          members.forEach((m) => {
            const img = m[2];
            if (img && !seen.has(img)) {
              const el = document.createElement('img');
              el.src = img;
              divAppend.appendChild(el);
              seen.add(img);
            }
          });
        } catch (_) {}
      });
      channel.on('broadcast', { event: 'navigate' }, () => {
        try { sessionStorage.setItem('stayOnList', '1'); document.cookie = 'stayOnList=1; path=/'; } catch (_) {}
        window.location.href = '/list';
      });
      channel.subscribe((status) => {
        console.log('[EMPTY] channel status', status);
        if (status === 'SUBSCRIBED') {
          console.log('[EMPTY] tracking presence', { steamID, username, hasAvatar: !!avatar });
          channel.track({ steamID, username, avatar });
        }
      });
    }

    // Initializes sessions for filtering
    sessionStorage.setItem('tagSelection', '');
    sessionStorage.setItem('categorySelection', '');
    sessionStorage.setItem('priceSelection', '');
    sessionStorage.setItem('minPriceSelection', '');
    sessionStorage.setItem('maxPriceSelection', '');
    // Legacy Socket.IO join removed; presence tracking handles membership
     
    // Presence sync will render avatars (see channel.on('presence','sync') above)

    // Button used to dynamically reload page for all members
    let button = document.getElementById('newList');
    button.addEventListener('click', function() {
        console.log('[EMPTY] Generate List clicked');
        try { sessionStorage.setItem('stayOnList', '1'); document.cookie = 'stayOnList=1; path=/'; } catch (_) {}
        if (channel) {
          console.log('[EMPTY] broadcasting navigate');
          channel.send({ type: 'broadcast', event: 'navigate', payload: {} });
        }
        window.location.href = '/list';
    });

    // Leave functionality to clear all user data
    let leave = document.getElementById('leave');
    leave.addEventListener('click', function() {
        let roomNumber = Cookies.get('roomNumber');
        sessionStorage.clear();
        window.location.href = "/leave";
    });

    // Presence sync will update the UI for joins/leaves

    // Used to copy the room number
    function copyFunction() {
        let copyRoomNum = document.getElementById('roomNumber');
        let selection = window.getSelection();
        let range = document.createRange();

        range.selectNodeContents(copyRoomNum);
        selection.removeAllRanges();
        selection.addRange(range);
        
        document.execCommand('copy');
    }

    // Shows that the room code has been copied
    function showSuccess() {
        jSuites.notification({
            name: 'Copied to Clipboard!',
        });
    }

    // Utilizing jSuite notifs to give a simple popup for users in Demo mode
    function demoNotification() {
        jSuites.notification({
            name: 'Welcome to the Demo!',
            message: `After logging in via Steam. Users can either Create Rooms or Join other pre-existing ones, which leads to this shared Room page. Once in this room, any user can generate the list of shared games amongst all users. Click Generate List to proceed!`,
            autoHide: false
        });
    }
    const cookieResult = Cookies.get('isDemo');
    if (cookieResult == `true`) {
        demoNotification();
    }
    
</script>
