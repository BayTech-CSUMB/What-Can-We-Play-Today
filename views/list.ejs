<%- include('partials/header.ejs') %> 
<%- include('partials/navbar.ejs') %>

<button id= "leave" style="background-color: red;">LEAVE ROOM</button>
<p> Filter By Category: </p>
<div id = "menuDiv">
</div>
<div id="filter"> </div>
<div id="tempTagButton"></div>

<body onload="sendMessage()">
    <div class="gradient-background">
        <div id="toGrab"></div>
        <hr />
        <div id="recGames"></div>
        <!-- TODO: Put Room Members to the side of games -->
        <!-- <div id="roomMembers">
            <h6> MEMBERS </h6>
        </div> -->

    </div>



</body>


<script>
  const socket = io("<%= url %>");
  socket.on("connection");

  // If Tags are found, provide them a way to "remove" them.
  // For now, we'll just have a single button to clear and then reload the page.
  if (sessionStorage.getItem('tagSelection')) {
    let tempButton = document.createElement("button");
    tempButton.innerHTML = "Clear Tags";

    tempButton.addEventListener('click', () => {
        // TODO: Ideally you'd want to just remove tagSelection or modify it based on the specific tag but for now this will work.  
        sessionStorage.clear(); 
        window.location.reload();
    });

    document.querySelector('#tempTagButton').appendChild(tempButton);
  }

  const sendMessage = () => {
    let steamID = Cookies.get("steamID");
    let username = Cookies.get("username");
    let avatar = Cookies.get("avatar");
    let roomNumber = Cookies.get("roomNumber");

    function filterBySelected(event){
        const selected = event.target.value;
        sessionStorage.setItem('tagSelection', selected);
        window.location.reload();
    }

    // Triggers the generation of lists on 
    socket.emit("generate", {
      steamID: steamID,
      username: username,
      avatar: avatar,
      roomNumber: roomNumber,
      tagSelection: sessionStorage.getItem('tagSelection'),
      categorySelection: sessionStorage.getItem('categorySelection'),
      priceSelection: sessionStorage.getItem('priceSelection')
    });

    socket.on("finalList", (data) => {
      const roomMembers = data.roomMembers;
      const sharedGameNames = data.games;
      const ownedByWho = data.owners;
      const gameLinks = data.links;
      const gameImages = data.images;
      const gameTags = data.tags;
      const gamePrices = data.prices;
      const categories = data.categories;
      const categoryArray = categories.map((str) => str.replace(/['"] + /g, ''));

      function dropDownMenu() {
        const menu = document.createElement("select");

        // TODO: Make a Select Tag option that won't trigger the tag refreshing feature of the function.
        // const temp = document.createElement("option");
        // menu.appendChild(temp);

        for (let i = 0; i < categoryArray.length; i++){
          const option = document.createElement("option");
          option.value = categoryArray[i];
          option.setAttribute('name', "optionn");
          option.textContent = categoryArray[i];
          menu.appendChild(option);
        }

        let menuDiv = document.getElementById("menuDiv");
        menuDiv.appendChild(menu);

        // TODO: Add a button to trigger this instead of "change"
        menu.addEventListener("change", filterBySelected);
      }

      dropDownMenu();


      function invertOwners(someArr) {
        let temp = [];
        for (let i = 0; i < roomMembers.length; i++) {
          temp.push(i);
        }
        return filterOut(temp, someArr);
      }

      function convertToUser(someArr) {
        let temp = ``;
        for (let i = 0; i < someArr.length; i++) {
          temp += `<img class="userIconInList" src="${roomMembers[someArr[i]][2]}" alt="Icon for ${roomMembers[someArr[i]][1]}">`;
        }
        return temp;
      }

      function filterOut(arr1, arr2) {
        const result = arr1.filter((x) => arr2.indexOf(x) == -1);
        return result;
      }

      function buildTags(tagsStringForm) {
        if (tagsStringForm != '') {
            let temp = tagsStringForm.split(',');
            let toReturn = ``;
            for (let i = 0; i < 2; i++) {
                toReturn += `<p class="gameTag"> ${temp[i]} </p>`;
            }
            return toReturn;
        } else {
            return '';
        }
      }

      function buildPrices(gamesPrices) {
        let toReturn = ``;
        if (gamesPrices.length == 2) {
            toReturn += `<p class="normalPrice"> ${gamesPrices[0]} </p>`
            toReturn += `<p class="fullPrice"> ${gamesPrices[1]} </p>`;
        } else {
            toReturn += `<p class="normalPrice"> ${gamesPrices[0]} </p>`;
        }
        return toReturn;
      }

      let suggestDiv = document.getElementById("toGrab");
      let recommendDiv = document.querySelector("#recGames");

      // This IF is a workaround to ensure we don't get DUPLICATE games in our list.
      if (
        suggestDiv.childNodes.length === 0 &&
        recommendDiv.childNodes.length === 0
      ) {
        for (let i = 0; i < sharedGameNames.length; i++) {
            // IF the game is NOT owned by everyone, do the top case.
          let tempTag = buildTags(gameTags[i]);
          let tempPrice = buildPrices(gamePrices[i]);

          if (ownedByWho[i].length != roomMembers.length) {

            let users = convertToUser(invertOwners(ownedByWho[i]));
            // TODO: Use actual JS methods to build these items instead of hard coding strings
            recommendDiv.innerHTML += `
                <div class="gameItem">
                    <img class="gameImage" src="${gameImages[i]}" alt="Icon for ${sharedGameNames[i]}">
                    <div class="seperator">
                        <a class="gameTitle" href="${gameLinks[i]}"> ${sharedGameNames[i]} </a>
                        <div class="tagHolder">
                            ${tempTag}
                            ${tempPrice}
                        </div>
                    </div>
                    <div class="roomMembers">
                        <p class="gameMemberText"> NOT OWNED BY </>
                        <div class="roomMemberImages">
                            ${users}    
                        </div>
                    </div>
                </div>
            `;
          } else { // Case for EVERYONE in the room owns the game
            suggestDiv.innerHTML += `
                <div class="gameItem">
                    <img class="gameImage" src="${gameImages[i]}" alt="Icon for ${sharedGameNames[i]}">
                    <div class="seperator">
                        <a class="gameTitle" href="${gameLinks[i]}"> ${sharedGameNames[i]} </a>
                        <div class="tagHolder">
                            ${tempTag}
                            ${tempPrice}
                        </div>
                    </div>
                </div>
                `;
          }
        }
      }

    function setCats (){
      filter = document.getElementById('filter');
      filter.innerHTML(`<p>${categories[1]}</p>`);
    };

    });
  };

  let leave = document.getElementById("leave");
  leave.addEventListener('click', function() {
    sessionStorage.clear();
    window.location.href = "/logout";
  })
</script>
